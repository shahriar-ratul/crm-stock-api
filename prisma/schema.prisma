// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id          Int               @id @default(autoincrement())
  fullName    String?
  dob         DateTime?
  contactNo   String?
  username    String?           @unique
  email       String            @unique
  password    String
  photo       String?
  joinedDate  DateTime?
  
  referrerId  Int?  
  referrer   Admin? @relation("ReferredBy", fields: [referrerId], references: [id] ,onDelete:  SetNull)
  referredByUsers  Admin[]      @relation("ReferredBy")

  relationship String?

  platform    Json?

  lastLogin   DateTime?
  
  country     String?
  city        String?
  address     String?
  postcode    String?

  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  deleted   Boolean   @default(false)
  deletedBy Int?
  deletedAt DateTime?
  
  roles       AdminRole[]
  permissions AdminPermission[]
  tokens Token[]

  stocks Stock[]

}

model Permission {
  id        Int               @id @default(autoincrement())
  name      String            @unique
  slug      String            @unique
  group     String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  roles     PermissionRole[]
  admins    AdminPermission[]
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  permissions PermissionRole[]
  admins      AdminRole[]
}

model PermissionRole {
  permission   Permission @relation(fields: [permissionId], references: [id],onDelete: Cascade)
  permissionId Int 
  role         Role       @relation(fields: [roleId], references: [id],onDelete: Cascade)
  roleId       Int 
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([permissionId, roleId])
}

model AdminRole {
  roleId  Int
  adminId Int 
  admin   Admin @relation(fields: [adminId], references: [id],onDelete: Cascade)
  role    Role  @relation(fields: [roleId], references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([adminId, roleId])
}

model AdminPermission {
  permissionId Int
  adminId      Int

  admin      Admin      @relation(fields: [adminId], references: [id],onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([adminId, permissionId])
}

model Token {
  id           Int       @id @default(autoincrement())
  admin        Admin     @relation(fields: [adminId], references: [id],onDelete:  Cascade)
  adminId      Int
  token        String
  refreshToken String
  ip           String?
  userAgent    String?
  expiresAt    DateTime?
  isRevoked    Boolean   @default(false)
  revokedAt    DateTime?
  revokedBy    Int?
  revokedByIp  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Category{
  id Int @id @default(autoincrement())
  name String
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stocks Stock[]
}

model Source{
  id Int @id @default(autoincrement())
  name String
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stocks Stock[]
}

model Route{
  id Int @id @default(autoincrement())
  name String 
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stocks Stock[]
}

model Platform{
  id Int @id @default(autoincrement())
  name String
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stocks StockPlatform[]
}

model Stock{
  id Int @id @default(autoincrement())
  name String
  stockID String
  entryDate DateTime
  batch String
  imageCover String
  qty Int
  currentStock Int
  costPerUnit Float
  localShippingCost Float
  internationalShippingCost Float
  customsTax Float
  salePrice Float
  marketPrice Float
  partnerPrice Float

  trackingStatus String
  trackingNumberLocal String
  trackingNumberInternational String

  email String

  isActive Boolean @default(true)

  categoryID Int
  category Category @relation(fields: [categoryID], references: [id],onDelete:  Cascade)

  sourceID Int
  source Source @relation(fields: [sourceID], references: [id],onDelete:  Cascade)

  routeID Int
  route Route @relation(fields: [routeID], references: [id],onDelete:  Cascade)

  adminId Int
  admin Admin @relation(fields: [adminId], references: [id],onDelete:  Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images StockImages[]
  platforms StockPlatform[]
}

model StockPlatform{
  stockID Int
  platformID Int
  stock Stock @relation(fields: [stockID], references: [id],onDelete:  Cascade)
  platform Platform @relation(fields: [platformID], references: [id],onDelete:  Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([stockID, platformID])
}

model StockImages{
  id Int @id @default(autoincrement())
  stockID Int
  stock Stock @relation(fields: [stockID], references: [id],onDelete:  Cascade)
  path String
  type String
  size Int
  url String
}
